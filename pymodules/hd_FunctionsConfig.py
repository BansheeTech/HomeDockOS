"""
hd_FunctionsConfig.py
Copyright Â© 2023-2025 Banshee, All Rights Reserved
https://www.banshee.pro
"""

import os
import re
import psutil
import bcrypt
import configparser

from pymodules.hd_FunctionsGlobals import current_directory, compose_upload_folder


def check_and_generate_config():
    config_file = os.path.join(current_directory, "homedock_server.conf")

    default_external_drive = "disabled"
    partitions = psutil.disk_partitions()
    for partition in partitions:
        if "sd" in partition.device:
            default_external_drive = partition.device
            break

    password_input = "passwd".encode("utf-8")
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password_input, salt)
    hashed_password_str = hashed_password.decode("utf-8")

    if not os.path.exists(config_file):
        config = configparser.ConfigParser()
        config["Config"] = {
            "user_name": "user",
            "user_password": hashed_password_str,
            "run_port": "80",
            "dynamic_dns": "get.homedock.cloud",
            "local_dns": "True",
            "run_on_development": "False",
            "disable_usage_data": "False",
            "delete_old_image_containers_after_update": "False",
            "delete_old_image_containers_after_uninstall": "False",
            "default_external_drive": default_external_drive,
            "selected_theme": "default",
            "selected_back": "back1.jpg",
        }

        with open(config_file, "w") as configfile:
            config.write(configfile)
            print()
            print(" * Default configuration file missing, it has been autogenerated")
            print(" \033[1;31;40m* Modify your login credentials by logging in with the default user and password!\033[0m")

    check_and_update_password(config_file)
    check_and_update_config()

    if not os.path.exists(compose_upload_folder):
        os.makedirs(compose_upload_folder)


def check_and_update_password(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)

    user_password = config.get("Config", "user_password")

    if not re.match(r"^\$2b\$[0-9]{2}\$[./A-Za-z0-9]{53}$", user_password):
        if len(user_password) > 30:
            print("Error: Please provide a password shorter than 30 characters.")
            exit(1)

        print(" * Detected plaintext password. Hashing now...")
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(user_password.encode("utf-8"), salt).decode("utf-8")

        config.set("Config", "user_password", hashed_password)
        with open(config_file, "w") as configfile:
            config.write(configfile)
            print(" * Password has been hashed and saved to configuration.")


def check_and_update_config():
    config_file = os.path.join(current_directory, "homedock_server.conf")
    config = configparser.ConfigParser()

    if os.path.exists(config_file):
        config.read(config_file)

        if not config.has_option("Config", "disable_usage_data"):
            config.set("Config", "disable_usage_data", "False")
            with open(config_file, "w") as configfile:
                config.write(configfile)

    else:
        print("Configuration file does not exist. Generate it first.")


def read_config():
    config = configparser.ConfigParser()
    config.read(os.path.join(current_directory, "homedock_server.conf"))

    try:
        run_port = config.getint("Config", "run_port")
        if run_port < 80 or run_port > 65535:
            print("Error: Invalid port number in configuration file. Must be between 80 and 65535.")
            print("Using default port 80, select any other port by modifying homedock_server.conf!")
            run_port = 80
    except ValueError:
        print("Error: Invalid port number in configuration file. Please make sure it's an integer.")
        print("Using default port 80, select any other port by modifying homedock_server.conf!")
        run_port = 80

    config_dict = {
        "user_name": config.get("Config", "user_name"),
        "user_password": config["Config"]["user_password"].encode("latin1"),
        "run_port": run_port,
        "local_dns": config.getboolean("Config", "local_dns"),
        "dynamic_dns": config.get("Config", "dynamic_dns"),
        "selected_theme": config.get("Config", "selected_theme"),
        "selected_back": config.get("Config", "selected_back"),
        "run_on_development": config.getboolean("Config", "run_on_development"),
        "disable_usage_data": config.getboolean("Config", "disable_usage_data"),
        "delete_old_image_containers_after_update": config.getboolean("Config", "delete_old_image_containers_after_update"),
        "delete_old_image_containers_after_uninstall": config.getboolean("Config", "delete_old_image_containers_after_uninstall"),
        "default_external_drive": config.get("Config", "default_external_drive"),
    }

    return config_dict
